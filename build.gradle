plugins {
    id 'java'
    id 'io.qameta.allure' version '2.12.0'
    id 'io.freefair.lombok' version '8.13.1'

}

group = 'ru.stoloto'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def allureVersion = "2.28.0",
    restAssuredVersion = "5.5.1",
    junitJupiterVersion = "5.12.0",
    junitPlatformVersion = "1.12.0",
    selenideVersion = "7.8.0"


dependencies
        {
            testImplementation(
                    "io.rest-assured:rest-assured:$restAssuredVersion",
                    "io.rest-assured:json-schema-validator:$restAssuredVersion",
                    "org.junit.jupiter:junit-jupiter:$junitJupiterVersion",
                    "org.slf4j:slf4j-simple:2.0.17",
                    "io.qameta.allure:allure-selenide:$allureVersion",
                    "com.codeborne:selenide:$selenideVersion",
                    "org.assertj:assertj-core:3.27.3"
            )
            testRuntimeOnly(
                    "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion",
                    "org.junit.platform:junit-platform-launcher:$junitPlatformVersion",
                    "org.junit.platform:junit-platform-engine:$junitPlatformVersion"
            )
            implementation('io.qameta.allure:allure-rest-assured:2.24.0')

        }

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    systemProperty "USERNAME", System.getProperty("USERNAME", "")
    systemProperty "PASSWORD", System.getProperty("PASSWORD", "")
    systemProperty "BOOK_ISBN", System.getProperty("BOOK_ISBN", "")
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task API(type: Test) {
    useJUnitPlatform {
        includeTags("API")
    }
}
task UI(type: Test) {
    useJUnitPlatform {
        includeTags("UI")
    }
}
